{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/jit.rs","byte_start":55814,"byte_end":55820,"line_start":1275,"line_end":1275,"column_start":60,"column_end":66,"is_primary":true,"text":[{"text":"        jit.add_jitblock(&asm.assemble(0x0).unwrap(), Some(0x1234));","highlight_start":60,"highlight_end":66}],"label":"expected struct `HashMap`, found integer","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/jit.rs","byte_start":55809,"byte_end":55813,"line_start":1275,"line_end":1275,"column_start":55,"column_end":59,"is_primary":false,"text":[{"text":"        jit.add_jitblock(&asm.assemble(0x0).unwrap(), Some(0x1234));","highlight_start":55,"highlight_end":59}],"label":"arguments to this enum variant are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected struct `HashMap<usize, usize, BuildHasherDefault<FxHasher>>`\n     found type `{integer}`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/jit.rs:1275:60\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1275\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        jit.add_jitblock(&asm.assemble(0x0).unwrap(), Some(0x1234));\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `HashMap`, found integer\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this enum variant are incorrect\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1mHashMap<usize, usize, BuildHasherDefault<FxHasher>>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                  found type `\u001b[0m\u001b[0m\u001b[1m{integer}\u001b[0m\u001b[0m`\u001b[0m\n\n"}
{"message":"this function takes 3 arguments but 2 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src/jit.rs","byte_start":55779,"byte_end":55822,"line_start":1275,"line_end":1275,"column_start":25,"column_end":68,"is_primary":false,"text":[{"text":"        jit.add_jitblock(&asm.assemble(0x0).unwrap(), Some(0x1234));","highlight_start":25,"highlight_end":68}],"label":"an argument of type `Option<HashMap<usize, usize, BuildHasherDefault<FxHasher>>>` is missing","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/jit.rs","byte_start":55767,"byte_end":55779,"line_start":1275,"line_end":1275,"column_start":13,"column_end":25,"is_primary":true,"text":[{"text":"        jit.add_jitblock(&asm.assemble(0x0).unwrap(), Some(0x1234));","highlight_start":13,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"associated function defined here","code":null,"level":"note","spans":[{"file_name":"src/jit.rs","byte_start":2413,"byte_end":2418,"line_start":79,"line_end":79,"column_start":25,"column_end":30,"is_primary":false,"text":[{"text":"    pub fn add_jitblock(&self, code: &[u8], pc: Option<usize>, ","highlight_start":25,"highlight_end":30}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/jit.rs","byte_start":2420,"byte_end":2431,"line_start":79,"line_end":79,"column_start":32,"column_end":43,"is_primary":false,"text":[{"text":"    pub fn add_jitblock(&self, code: &[u8], pc: Option<usize>, ","highlight_start":32,"highlight_end":43}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/jit.rs","byte_start":2433,"byte_end":2450,"line_start":79,"line_end":79,"column_start":45,"column_end":62,"is_primary":false,"text":[{"text":"    pub fn add_jitblock(&self, code: &[u8], pc: Option<usize>, ","highlight_start":45,"highlight_end":62}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/jit.rs","byte_start":2465,"byte_end":2514,"line_start":80,"line_end":80,"column_start":13,"column_end":62,"is_primary":false,"text":[{"text":"            local_lookup_map: Option<FxHashMap<usize, usize>>) -> usize {","highlight_start":13,"highlight_end":62}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/jit.rs","byte_start":2400,"byte_end":2412,"line_start":79,"line_end":79,"column_start":12,"column_end":24,"is_primary":true,"text":[{"text":"    pub fn add_jitblock(&self, code: &[u8], pc: Option<usize>, ","highlight_start":12,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"provide the argument","code":null,"level":"help","spans":[{"file_name":"src/jit.rs","byte_start":55767,"byte_end":55822,"line_start":1275,"line_end":1275,"column_start":13,"column_end":68,"is_primary":true,"text":[{"text":"        jit.add_jitblock(&asm.assemble(0x0).unwrap(), Some(0x1234));","highlight_start":13,"highlight_end":68}],"label":null,"suggested_replacement":"add_jitblock(&asm.assemble(0x0).unwrap(), Some(0x1234), {Option<HashMap<usize, usize, BuildHasherDefault<FxHasher>>>})","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this function takes 3 arguments but 2 arguments were supplied\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/jit.rs:1275:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1275\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        jit.add_jitblock(&asm.assemble(0x0).unwrap(), Some(0x1234));\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12man argument of type `Option<HashMap<usize, usize, BuildHasherDefault<FxHasher>>>` is missing\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: associated function defined here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/jit.rs:79:12\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub fn add_jitblock(&self, code: &[u8], pc: Option<usize>, \u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m80\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            local_lookup_map: Option<FxHashMap<usize, usize>>) -> usize {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: provide the argument\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1275\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        jit.\u001b[0m\u001b[0m\u001b[38;5;10madd_jitblock(&asm.assemble(0x0).unwrap(), Some(0x1234), {Option<HashMap<usize, usize, BuildHasherDefault<FxHasher>>>})\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/jit.rs","byte_start":55883,"byte_end":55889,"line_start":1276,"line_end":1276,"column_start":60,"column_end":66,"is_primary":true,"text":[{"text":"        jit.add_jitblock(&asm.assemble(0x0).unwrap(), Some(0x4444));","highlight_start":60,"highlight_end":66}],"label":"expected struct `HashMap`, found integer","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/jit.rs","byte_start":55878,"byte_end":55882,"line_start":1276,"line_end":1276,"column_start":55,"column_end":59,"is_primary":false,"text":[{"text":"        jit.add_jitblock(&asm.assemble(0x0).unwrap(), Some(0x4444));","highlight_start":55,"highlight_end":59}],"label":"arguments to this enum variant are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected struct `HashMap<usize, usize, BuildHasherDefault<FxHasher>>`\n     found type `{integer}`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/jit.rs:1276:60\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1276\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        jit.add_jitblock(&asm.assemble(0x0).unwrap(), Some(0x4444));\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `HashMap`, found integer\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this enum variant are incorrect\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1mHashMap<usize, usize, BuildHasherDefault<FxHasher>>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                  found type `\u001b[0m\u001b[0m\u001b[1m{integer}\u001b[0m\u001b[0m`\u001b[0m\n\n"}
{"message":"this function takes 3 arguments but 2 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src/jit.rs","byte_start":55848,"byte_end":55891,"line_start":1276,"line_end":1276,"column_start":25,"column_end":68,"is_primary":false,"text":[{"text":"        jit.add_jitblock(&asm.assemble(0x0).unwrap(), Some(0x4444));","highlight_start":25,"highlight_end":68}],"label":"an argument of type `Option<HashMap<usize, usize, BuildHasherDefault<FxHasher>>>` is missing","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/jit.rs","byte_start":55836,"byte_end":55848,"line_start":1276,"line_end":1276,"column_start":13,"column_end":25,"is_primary":true,"text":[{"text":"        jit.add_jitblock(&asm.assemble(0x0).unwrap(), Some(0x4444));","highlight_start":13,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"associated function defined here","code":null,"level":"note","spans":[{"file_name":"src/jit.rs","byte_start":2413,"byte_end":2418,"line_start":79,"line_end":79,"column_start":25,"column_end":30,"is_primary":false,"text":[{"text":"    pub fn add_jitblock(&self, code: &[u8], pc: Option<usize>, ","highlight_start":25,"highlight_end":30}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/jit.rs","byte_start":2420,"byte_end":2431,"line_start":79,"line_end":79,"column_start":32,"column_end":43,"is_primary":false,"text":[{"text":"    pub fn add_jitblock(&self, code: &[u8], pc: Option<usize>, ","highlight_start":32,"highlight_end":43}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/jit.rs","byte_start":2433,"byte_end":2450,"line_start":79,"line_end":79,"column_start":45,"column_end":62,"is_primary":false,"text":[{"text":"    pub fn add_jitblock(&self, code: &[u8], pc: Option<usize>, ","highlight_start":45,"highlight_end":62}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/jit.rs","byte_start":2465,"byte_end":2514,"line_start":80,"line_end":80,"column_start":13,"column_end":62,"is_primary":false,"text":[{"text":"            local_lookup_map: Option<FxHashMap<usize, usize>>) -> usize {","highlight_start":13,"highlight_end":62}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/jit.rs","byte_start":2400,"byte_end":2412,"line_start":79,"line_end":79,"column_start":12,"column_end":24,"is_primary":true,"text":[{"text":"    pub fn add_jitblock(&self, code: &[u8], pc: Option<usize>, ","highlight_start":12,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"provide the argument","code":null,"level":"help","spans":[{"file_name":"src/jit.rs","byte_start":55836,"byte_end":55891,"line_start":1276,"line_end":1276,"column_start":13,"column_end":68,"is_primary":true,"text":[{"text":"        jit.add_jitblock(&asm.assemble(0x0).unwrap(), Some(0x4444));","highlight_start":13,"highlight_end":68}],"label":null,"suggested_replacement":"add_jitblock(&asm.assemble(0x0).unwrap(), Some(0x4444), {Option<HashMap<usize, usize, BuildHasherDefault<FxHasher>>>})","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this function takes 3 arguments but 2 arguments were supplied\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/jit.rs:1276:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1276\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        jit.add_jitblock(&asm.assemble(0x0).unwrap(), Some(0x4444));\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12man argument of type `Option<HashMap<usize, usize, BuildHasherDefault<FxHasher>>>` is missing\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: associated function defined here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/jit.rs:79:12\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub fn add_jitblock(&self, code: &[u8], pc: Option<usize>, \u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m80\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            local_lookup_map: Option<FxHashMap<usize, usize>>) -> usize {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: provide the argument\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1276\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        jit.\u001b[0m\u001b[0m\u001b[38;5;10madd_jitblock(&asm.assemble(0x0).unwrap(), Some(0x4444), {Option<HashMap<usize, usize, BuildHasherDefault<FxHasher>>>})\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/jit.rs","byte_start":55952,"byte_end":55958,"line_start":1277,"line_end":1277,"column_start":60,"column_end":66,"is_primary":true,"text":[{"text":"        jit.add_jitblock(&asm.assemble(0x0).unwrap(), Some(0x9055));","highlight_start":60,"highlight_end":66}],"label":"expected struct `HashMap`, found integer","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/jit.rs","byte_start":55947,"byte_end":55951,"line_start":1277,"line_end":1277,"column_start":55,"column_end":59,"is_primary":false,"text":[{"text":"        jit.add_jitblock(&asm.assemble(0x0).unwrap(), Some(0x9055));","highlight_start":55,"highlight_end":59}],"label":"arguments to this enum variant are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected struct `HashMap<usize, usize, BuildHasherDefault<FxHasher>>`\n     found type `{integer}`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/jit.rs:1277:60\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1277\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        jit.add_jitblock(&asm.assemble(0x0).unwrap(), Some(0x9055));\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `HashMap`, found integer\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this enum variant are incorrect\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1mHashMap<usize, usize, BuildHasherDefault<FxHasher>>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                  found type `\u001b[0m\u001b[0m\u001b[1m{integer}\u001b[0m\u001b[0m`\u001b[0m\n\n"}
{"message":"this function takes 3 arguments but 2 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src/jit.rs","byte_start":55917,"byte_end":55960,"line_start":1277,"line_end":1277,"column_start":25,"column_end":68,"is_primary":false,"text":[{"text":"        jit.add_jitblock(&asm.assemble(0x0).unwrap(), Some(0x9055));","highlight_start":25,"highlight_end":68}],"label":"an argument of type `Option<HashMap<usize, usize, BuildHasherDefault<FxHasher>>>` is missing","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/jit.rs","byte_start":55905,"byte_end":55917,"line_start":1277,"line_end":1277,"column_start":13,"column_end":25,"is_primary":true,"text":[{"text":"        jit.add_jitblock(&asm.assemble(0x0).unwrap(), Some(0x9055));","highlight_start":13,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"associated function defined here","code":null,"level":"note","spans":[{"file_name":"src/jit.rs","byte_start":2413,"byte_end":2418,"line_start":79,"line_end":79,"column_start":25,"column_end":30,"is_primary":false,"text":[{"text":"    pub fn add_jitblock(&self, code: &[u8], pc: Option<usize>, ","highlight_start":25,"highlight_end":30}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/jit.rs","byte_start":2420,"byte_end":2431,"line_start":79,"line_end":79,"column_start":32,"column_end":43,"is_primary":false,"text":[{"text":"    pub fn add_jitblock(&self, code: &[u8], pc: Option<usize>, ","highlight_start":32,"highlight_end":43}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/jit.rs","byte_start":2433,"byte_end":2450,"line_start":79,"line_end":79,"column_start":45,"column_end":62,"is_primary":false,"text":[{"text":"    pub fn add_jitblock(&self, code: &[u8], pc: Option<usize>, ","highlight_start":45,"highlight_end":62}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/jit.rs","byte_start":2465,"byte_end":2514,"line_start":80,"line_end":80,"column_start":13,"column_end":62,"is_primary":false,"text":[{"text":"            local_lookup_map: Option<FxHashMap<usize, usize>>) -> usize {","highlight_start":13,"highlight_end":62}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/jit.rs","byte_start":2400,"byte_end":2412,"line_start":79,"line_end":79,"column_start":12,"column_end":24,"is_primary":true,"text":[{"text":"    pub fn add_jitblock(&self, code: &[u8], pc: Option<usize>, ","highlight_start":12,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"provide the argument","code":null,"level":"help","spans":[{"file_name":"src/jit.rs","byte_start":55905,"byte_end":55960,"line_start":1277,"line_end":1277,"column_start":13,"column_end":68,"is_primary":true,"text":[{"text":"        jit.add_jitblock(&asm.assemble(0x0).unwrap(), Some(0x9055));","highlight_start":13,"highlight_end":68}],"label":null,"suggested_replacement":"add_jitblock(&asm.assemble(0x0).unwrap(), Some(0x9055), {Option<HashMap<usize, usize, BuildHasherDefault<FxHasher>>>})","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this function takes 3 arguments but 2 arguments were supplied\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/jit.rs:1277:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1277\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        jit.add_jitblock(&asm.assemble(0x0).unwrap(), Some(0x9055));\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12man argument of type `Option<HashMap<usize, usize, BuildHasherDefault<FxHasher>>>` is missing\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: associated function defined here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/jit.rs:79:12\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub fn add_jitblock(&self, code: &[u8], pc: Option<usize>, \u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m80\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            local_lookup_map: Option<FxHashMap<usize, usize>>) -> usize {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: provide the argument\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1277\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        jit.\u001b[0m\u001b[0m\u001b[38;5;10madd_jitblock(&asm.assemble(0x0).unwrap(), Some(0x9055), {Option<HashMap<usize, usize, BuildHasherDefault<FxHasher>>>})\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/jit.rs","byte_start":56021,"byte_end":56027,"line_start":1278,"line_end":1278,"column_start":60,"column_end":66,"is_primary":true,"text":[{"text":"        jit.add_jitblock(&asm.assemble(0x0).unwrap(), Some(0x1000));","highlight_start":60,"highlight_end":66}],"label":"expected struct `HashMap`, found integer","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/jit.rs","byte_start":56016,"byte_end":56020,"line_start":1278,"line_end":1278,"column_start":55,"column_end":59,"is_primary":false,"text":[{"text":"        jit.add_jitblock(&asm.assemble(0x0).unwrap(), Some(0x1000));","highlight_start":55,"highlight_end":59}],"label":"arguments to this enum variant are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected struct `HashMap<usize, usize, BuildHasherDefault<FxHasher>>`\n     found type `{integer}`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/jit.rs:1278:60\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1278\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        jit.add_jitblock(&asm.assemble(0x0).unwrap(), Some(0x1000));\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `HashMap`, found integer\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this enum variant are incorrect\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1mHashMap<usize, usize, BuildHasherDefault<FxHasher>>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                  found type `\u001b[0m\u001b[0m\u001b[1m{integer}\u001b[0m\u001b[0m`\u001b[0m\n\n"}
{"message":"this function takes 3 arguments but 2 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src/jit.rs","byte_start":55986,"byte_end":56029,"line_start":1278,"line_end":1278,"column_start":25,"column_end":68,"is_primary":false,"text":[{"text":"        jit.add_jitblock(&asm.assemble(0x0).unwrap(), Some(0x1000));","highlight_start":25,"highlight_end":68}],"label":"an argument of type `Option<HashMap<usize, usize, BuildHasherDefault<FxHasher>>>` is missing","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/jit.rs","byte_start":55974,"byte_end":55986,"line_start":1278,"line_end":1278,"column_start":13,"column_end":25,"is_primary":true,"text":[{"text":"        jit.add_jitblock(&asm.assemble(0x0).unwrap(), Some(0x1000));","highlight_start":13,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"associated function defined here","code":null,"level":"note","spans":[{"file_name":"src/jit.rs","byte_start":2413,"byte_end":2418,"line_start":79,"line_end":79,"column_start":25,"column_end":30,"is_primary":false,"text":[{"text":"    pub fn add_jitblock(&self, code: &[u8], pc: Option<usize>, ","highlight_start":25,"highlight_end":30}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/jit.rs","byte_start":2420,"byte_end":2431,"line_start":79,"line_end":79,"column_start":32,"column_end":43,"is_primary":false,"text":[{"text":"    pub fn add_jitblock(&self, code: &[u8], pc: Option<usize>, ","highlight_start":32,"highlight_end":43}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/jit.rs","byte_start":2433,"byte_end":2450,"line_start":79,"line_end":79,"column_start":45,"column_end":62,"is_primary":false,"text":[{"text":"    pub fn add_jitblock(&self, code: &[u8], pc: Option<usize>, ","highlight_start":45,"highlight_end":62}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/jit.rs","byte_start":2465,"byte_end":2514,"line_start":80,"line_end":80,"column_start":13,"column_end":62,"is_primary":false,"text":[{"text":"            local_lookup_map: Option<FxHashMap<usize, usize>>) -> usize {","highlight_start":13,"highlight_end":62}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/jit.rs","byte_start":2400,"byte_end":2412,"line_start":79,"line_end":79,"column_start":12,"column_end":24,"is_primary":true,"text":[{"text":"    pub fn add_jitblock(&self, code: &[u8], pc: Option<usize>, ","highlight_start":12,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"provide the argument","code":null,"level":"help","spans":[{"file_name":"src/jit.rs","byte_start":55974,"byte_end":56029,"line_start":1278,"line_end":1278,"column_start":13,"column_end":68,"is_primary":true,"text":[{"text":"        jit.add_jitblock(&asm.assemble(0x0).unwrap(), Some(0x1000));","highlight_start":13,"highlight_end":68}],"label":null,"suggested_replacement":"add_jitblock(&asm.assemble(0x0).unwrap(), Some(0x1000), {Option<HashMap<usize, usize, BuildHasherDefault<FxHasher>>>})","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this function takes 3 arguments but 2 arguments were supplied\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/jit.rs:1278:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1278\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        jit.add_jitblock(&asm.assemble(0x0).unwrap(), Some(0x1000));\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12man argument of type `Option<HashMap<usize, usize, BuildHasherDefault<FxHasher>>>` is missing\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: associated function defined here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/jit.rs:79:12\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub fn add_jitblock(&self, code: &[u8], pc: Option<usize>, \u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m80\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            local_lookup_map: Option<FxHashMap<usize, usize>>) -> usize {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: provide the argument\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1278\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        jit.\u001b[0m\u001b[0m\u001b[38;5;10madd_jitblock(&asm.assemble(0x0).unwrap(), Some(0x1000), {Option<HashMap<usize, usize, BuildHasherDefault<FxHasher>>>})\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\n"}
{"message":"aborting due to 8 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 8 previous errors\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0061, E0308.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0061, E0308.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0061`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0061`.\u001b[0m\n"}
